digraph "FSM for 'main' function" {
Node0x12fddc0 [shape=record, color=transparent, style=filled, fillcolor="#F79e5e", label="{printf(\"hello\");\lint a = 10;\lint b = 5;\lint c = 3;\lscanf(\"%d\", &amp;c);}"];
Node0x12fddc1 [shape=circle, color=transparent, style=filled, fillcolor="#ADD8E6", label=state1, xlabel=<<TABLE BORDER="0" CELLBORDER="0" CELLSPACING="0"><TR><TD BGCOLOR="#ADD8E6" ALIGN="center">if (a&gt;b)</TD></TR></TABLE>>, fixedsize=true, width=1.3, height=1.3];
Node0x12fe6a0 [shape=record, color=transparent, style=filled, fillcolor="#F79e5e", label="{a++;}"];
Node0x12ff3f1 [shape=circle, color=transparent, style=filled, fillcolor="#FFCC00", label=state2, xlabel=<<TABLE BORDER="0" CELLBORDER="0" CELLSPACING="0"><TR><TD BGCOLOR="#FFCC00" ALIGN="center">while(a&gt;b)</TD></TR></TABLE>>, fixedsize=true, width=1.3, height=1.3];
Node0x12ff590 [shape=record, color=transparent, style=filled, fillcolor="#F79e5e", label="{a++;}"];
Node0x12ff5e0 [shape=record, color=transparent, style=filled, fillcolor="#F79e5e", label="{int * p=(int*)malloc(sizeof(int));}"];
Node0x12ff5e1 [shape=circle, color=transparent, style=filled, fillcolor="#ADD8E6", label=state3, xlabel=<<TABLE BORDER="0" CELLBORDER="0" CELLSPACING="0"><TR><TD BGCOLOR="#ADD8E6" ALIGN="center">if(a&gt;b&amp;&amp;b&gt;c)</TD></TR></TABLE>>, fixedsize=true, width=1.3, height=1.3];
Node0x1300bc0 [shape=record, color=transparent, style=filled, fillcolor="#F79e5e", label="{a++;}"];
Node0x1300911 [shape=circle, color=transparent, style=filled, fillcolor="#ADD8E6", label=state4, xlabel=<<TABLE BORDER="0" CELLBORDER="0" CELLSPACING="0"><TR><TD BGCOLOR="#ADD8E6" ALIGN="center">if(a&gt;b)</TD></TR></TABLE>>, fixedsize=true, width=1.3, height=1.3];
Node0x1301241 [shape=circle, color=transparent, style=filled, fillcolor="#ADD8E6", label=state5, xlabel=<<TABLE BORDER="0" CELLBORDER="0" CELLSPACING="0"><TR><TD BGCOLOR="#ADD8E6" ALIGN="center">if(a&gt;b)</TD></TR></TABLE>>, fixedsize=true, width=1.3, height=1.3];
Node0x1301500 [shape=record, color=transparent, style=filled, fillcolor="#F79e5e", label="{a++;}"];
Node0x1301550 [shape=record, color=transparent, style=filled, fillcolor="#F79e5e", label="{a++;\la++;\la++;}"];
Node0x1301291 [shape=circle, color=transparent, style=filled, fillcolor="#ADD8E6", label=state6, xlabel=<<TABLE BORDER="0" CELLBORDER="0" CELLSPACING="0"><TR><TD BGCOLOR="#ADD8E6" ALIGN="center">if(a&gt;b)</TD></TR></TABLE>>, fixedsize=true, width=1.3, height=1.3];
Node0x1301f20 [shape=record, color=transparent, style=filled, fillcolor="#F79e5e", label="{a++;\la++;\la++;\la++;\la++;\lb++;\la++;}"];
Node0x1301f70 [shape=record, color=transparent, style=filled, fillcolor="#F79e5e", label="{a++;}"];
Node0x1301f71 [shape=circle, color=transparent, style=filled, fillcolor="#D3D3D3", label=state7, xlabel=<<TABLE BORDER="0" CELLBORDER="0" CELLSPACING="0"><TR><TD BGCOLOR="#D3D3D3" ALIGN="center">switch (a)</TD></TR></TABLE>>, fixedsize=true, width=1.3, height=1.3];
Node0x1303230 [shape=record, color=transparent, style=filled, fillcolor="#F79e5e", label="{a++;\lbreak;}"];
Node0x13032b0 [shape=record, color=transparent, style=filled, fillcolor="#F79e5e", label="{a++;\lbreak;}"];
Node0x1303330 [shape=record, color=transparent, style=filled, fillcolor="#F79e5e", label="{a++;\lbreak;}"];
Node0x13033f0 [shape=record, color=transparent, style=filled, fillcolor="#F79e5e", label="{a++;\lbreak;}"];
Node0x13031e0 [shape=record, color=transparent, style=filled, fillcolor="#F79e5e", label="{break;}"];
Node0x13037b0 [shape=record, color=transparent, style=filled, fillcolor="#F79e5e", label="{return 0;}"];
Node0x12fddc0 -> Node0x12fddc1 [penwidth=3, color="#555555"];
Node0x12fe6a0 -> Node0x12ff3f1 [penwidth=3, color="#555555"];
Node0x12ff590 -> Node0x12ff3f1 [penwidth=3, color="#555555"];
Node0x12ff5e0 -> Node0x12ff5e1 [penwidth=3, color="#555555"];
Node0x1300bc0 -> Node0x1300911 [penwidth=3, color="#555555"];
Node0x1301500 -> Node0x1301550 [penwidth=3, color="#555555"];
Node0x1301550 -> Node0x1301291 [penwidth=3, color="#555555"];
Node0x1301f20 -> Node0x1301f70 [penwidth=3, color="#555555"];
Node0x1301f70 -> Node0x1301f71 [penwidth=3, color="#555555"];
Node0x1303230 -> Node0x13037b0 [penwidth=3, color="#555555"];
Node0x13032b0 -> Node0x13037b0 [penwidth=3, color="#555555"];
Node0x1303330 -> Node0x13037b0 [penwidth=3, color="#555555"];
Node0x13033f0 -> Node0x13037b0 [penwidth=3, color="#555555"];
Node0x13031e0 -> Node0x13037b0 [penwidth=3, color="#555555"];
Node0x12fddc1 -> Node0x12fe6a0 [color="#4CD964", penwidth=3];
Node0x12fddc1 -> Node0x12ff3f1 [color="#FF3B30", penwidth=3];
Node0x12ff3f1 -> Node0x12ff590 [color="#4CD964", penwidth=3];
Node0x12ff3f1 -> Node0x12ff5e0 [color="#FF3B30", penwidth=3];
Node0x12ff5e1 -> Node0x1300911 [color="#FF3B30", penwidth=3];
Node0x1300911 -> Node0x1301241 [color="#4CD964", penwidth=3];
Node0x1300911 -> Node0x1301291 [color="#FF3B30", penwidth=3];
Node0x1301241 -> Node0x1301500 [color="#4CD964", penwidth=3];
Node0x1301241 -> Node0x1301550 [color="#FF3B30", penwidth=3];
Node0x1301291 -> Node0x1301f20 [color="#4CD964", penwidth=3];
Node0x1301291 -> Node0x1301f70 [color="#FF3B30", penwidth=3];
Node0x1301f71 -> Node0x13031e0 [label=<<TABLE BORDER="0" CELLBORDER="0" CELLSPACING="0"><TR><TD BGCOLOR="#D3D3D3" ALIGN="center">a : def</TD></TR></TABLE>>, penwidth=3, color="#555555"];
Node0x1301f71 -> Node0x1303230 [label=<<TABLE BORDER="0" CELLBORDER="0" CELLSPACING="0"><TR><TD BGCOLOR="#D3D3D3" ALIGN="center">a : 10</TD></TR></TABLE>>, penwidth=3, color="#555555"];
Node0x1301f71 -> Node0x13032b0 [label=<<TABLE BORDER="0" CELLBORDER="0" CELLSPACING="0"><TR><TD BGCOLOR="#D3D3D3" ALIGN="center">a : 11</TD></TR></TABLE>>, penwidth=3, color="#555555"];
Node0x1301f71 -> Node0x1303330 [label=<<TABLE BORDER="0" CELLBORDER="0" CELLSPACING="0"><TR><TD BGCOLOR="#D3D3D3" ALIGN="center">a : 12</TD></TR></TABLE>>, penwidth=3, color="#555555"];
Node0x1301f71 -> Node0x13033f0 [label=<<TABLE BORDER="0" CELLBORDER="0" CELLSPACING="0"><TR><TD BGCOLOR="#D3D3D3" ALIGN="center">a : 13</TD></TR></TABLE>>, penwidth=3, color="#555555"];
Node0x12ff5e1 -> Node0x1300bc0 [color="#4CD964", penwidth=3];
}
